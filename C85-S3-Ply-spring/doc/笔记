Spring IOC( 控制反转 )

Spring 大管家负责创建和管理对象
1.对象池方式管理bean;
2.同(DI 依赖注入)配置bean

使用步骤:
1. 配置 pom.xml ==> spring-context 依赖 (bean core aop ...)
2. 配置 spring 的配置文件 : xml 和 注解
3. 业务开发

注入方式:
1. setter 注入 (常用)
2. 构造方法注入
3. 接口注入  (SpringMVC 大量使用)

bean 高级的特性和生命周期配置


Spring IOC 
XML配置				注解配置
beans.xml			BeanConfig.java + @Configuration
<bean>				@Bean
<init-lazy="true">	@Lazy
<primary="true">	@Primary
<init-method="">	@Bean(initMethod="")
<property>			Java 代码  ==> setXXXX

autowire			


注解实现自动装配( 配置业务模块之间的依赖注入 )
	xxxBiz ==> xxxDao
	class xxxBiz {
		private xxxDao xDao; // 实现自动的注入
	}

组件注解: 直接在业务类上定义的注解, 作用是替代 @Bean
@Component		通用的组件注解
@Controller		控制器组件注解 ==> 相对于 Servlet
@Service		服务类组件注解 ==> xxxBiz, xxxService ...
@Repository		Dao类组件注解 ==> xxxDao, xxxMapper ...

在配置类上加上组件扫描注解

实现 bean 自动注入
@Autowired	
@Resource

	<div>  层
	html5  <header><footer> .... 结构语义性


AOP: 实现通用的业务模块: 日志, 性能监控, 安全, 事务管理

OOP: 业务方法越来越细粒度 ==> 方法越来越多  ==> AOP 面向切面编程

AOP 的重要概念

join point(连接点):所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点.
		方法
		
Pointcut(切入点, 切点):所谓切入点是指我们要对那些joinpoint进行拦截的定义.通知定义了切面的”什么”和”何时”，切入点就定义了”何地”.
		连接点的表达式

Advice(通知):所谓通知是指拦截到joinpoint之后所要做的事情就是通知.通知分为前置通知,后置通知,异常通知,最终通知,环绕通知(切面要完成的功能)
		增强

Aspect(切面): 是通知和切入点的结合,通知和切入点共同定义了关于切面的全部内容---它的功能、在何时和何地完成其功能
		切面 = 切点 + 通知(增强)  => java 类型  xml标签

Target(目标对象):代理的目标对象
		被通知(增强)的对象  xxxBiz, xxxDao
		
Weaving(织入):是指把切面应用到目标对象来创建新的代理对象的过程.切面在指定的连接点织入到目标对象

Introduction(引入):在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.

try {
	before();
	biz();
	afterReturing();  
} catch (Exception e) {
	afterThrowing();
} finally {
	after();
}

======1=======
========== 前置增强 ===========
oracle user dao
========== 后置增强 ===========
========== 返回增强 ===========
======2=======
========== 前置增强 ===========
mysql user dao
========== 后置增强 ===========
========== 异常增强 ===========







